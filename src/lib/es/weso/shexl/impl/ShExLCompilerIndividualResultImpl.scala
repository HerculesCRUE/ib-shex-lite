package es.weso.shexl.impl

import es.weso.shexl._
import es.weso.shexlc.ast.Schema
import es.weso.shexlc.internal.io.{CompilerMsg, CompilerMsgsHandler}
import org.antlr.v4.runtime.CharStream

import scala.collection.mutable.{HashMap, ListBuffer}

/**
 * Represents the basic implementation fo the individual compiler result.
 *
 * @author Guillermo Facundo Colunga
 *
 * @param sourceFilePath is the source compiled.
 * @param compilerMsgsHandler is the compiler messages handler
 * @param schema the schema if it was generated.
 */
class ShExLCompilerIndividualResultImpl(sourceFilePath: String, inputStream: CharStream, compilerMsgsHandler: CompilerMsgsHandler, var schema: Option[Schema])
  extends ShExLCompilerIndividualResult {

  private[this] val generatedSources =
    new HashMap[ShExLCompilerTargetLanguage, Seq[ShExLCompilerGeneratedSource]]()

  /**
   * Gets the path of the source that generated this individual compiler result.
   *
   * @return the path of the source that generated this individual compiler result.
   */
  override def getSource: String = sourceFilePath

  /**
   * Gets the input stream corresponding to the source file that generated this individual result.
   *
   * @return the input stream corresponding to the source file that generated this individual result.
   */
  def getInputStream: CharStream = inputStream

  /**
   * Indicates if the source compiled contains an error.
   *
   * @return true if the compiled source generated an error, false otherwise.
   */
  override def hasErrors: Boolean = !this.compilerMsgsHandler.getErrorMsgs.isEmpty

  /**
   * Indicates if the source compiled contains a warning.
   *
   * @return true if the compiled source generated a warning, false otherwise.
   */
  override def hasWarnings: Boolean = !this.compilerMsgsHandler.getWarningMsgs.isEmpty

  /**
   * Gets the list of errors that generated the compilation of the source attached to this result.
   *
   * @return the list of errors that generated the compilation of the source attached to this result.
   */
  override def getErrors: Iterable[CompilerMsg] = this.compilerMsgsHandler.getErrorMsgs

  /**
   * Gets the list of warnings that generated the compilation of the source attached to this result.
   *
   * @return the list of warnings that generated the compilation of the source attached to this result.
   */
  override def getWarnings: Iterable[CompilerMsg] = this.compilerMsgsHandler.getErrorMsgs

  /**
   * Gets the generated schema as an option object. If the option is empty means that the compiler was not able to
   * generate an schema for the attached source. You should check the generated errors. Else the option object will
   * contain the generated schema.
   *
   * @return an option object that may contain the schema if no error was generated during the compilation.
   */
  override def getGeneratedSchema: Option[Schema] = schema

  /**
   * Sets the value for the generated schema. If the option is empty means that the compiler was not able to
   * * generate an schema for the attached source. You should check the generated errors. Else the option object will
   * * contain the generated schema.
   *
   * @param schema that has been generated by the compiler if any.
   */
  def setGeneratedSchema(schema: Option[Schema]): Unit = {
    this.schema = schema
  }

  /**
   * Gets the all the generated sources for the current source fle. It is important to know that a single file can
   * generate multiple sources. And also a single file can be the origin of the code generation in to multiple target
   * languages. For this reason this method returns a map where the key is the target language and for each key it
   * contains a collection of all the generated sources.
   *
   * @return a map where the key is the target language and for each key it contains a collection of all the generated
   *         sources.
   */
  override def getGeneratedSources: HashMap[ShExLCompilerTargetLanguage, Seq[ShExLCompilerGeneratedSource]] =
    generatedSources

  /**
   * Prints the errors formatted, if any.
   */
  def printErrors = this.compilerMsgsHandler.getErrorMsgs
    .foreach(err => println(err.toPrintableString(this.inputStream)))

  /**
   * Prints the warnings formatted, if any.
   */
  def printWarnings = this.compilerMsgsHandler.getWarningMsgs
    .foreach(warn => println(warn.toPrintableString(this.inputStream)))
}
